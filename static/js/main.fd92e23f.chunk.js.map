{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","pressedKey","undefined","handleDocumentKey","event","setState","document","addEventListener","this","removeEventListener","className","key","React","Component","ReactDOM","render","getElementById"],"mappings":"oNAMaA,EAAb,4MACEC,MAAe,CACbC,gBAAYC,GAFhB,EAaEC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAEJ,WAAYG,KAdhC,uDAKE,WACEE,SAASC,iBAAiB,QAASC,KAAKL,qBAN5C,kCASE,WACEG,SAASG,oBAAoB,QAASD,KAAKL,qBAV/C,oBAiBE,WACE,IAAQF,EAAeO,KAAKR,MAApBC,WAER,OACE,qBAAKS,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SACGT,EAAU,mCAA+BA,EAAWU,IAA1C,KAAmD,kCAvBxE,GAAyBC,IAAMC,W,MCD/BC,IAASC,OACP,cAAC,EAAD,IACAT,SAASU,eAAe,W","file":"static/js/main.fd92e23f.chunk.js","sourcesContent":["import React from 'react';\n\ntype State = {\n  pressedKey: KeyboardEvent | undefined;\n};\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    pressedKey: undefined,\n  };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleDocumentKey);\n  }\n\n  componentWillUnmount(): void {\n    document.removeEventListener('keyup', this.handleDocumentKey);\n  }\n\n  handleDocumentKey = (event: KeyboardEvent) => {\n    this.setState({ pressedKey: event });\n  };\n\n  render() {\n    const { pressedKey } = this.state;\n\n    return (\n      <div className=\"App\">\n        <p className=\"App__message\">\n          {pressedKey ? `The last pressed key is [${pressedKey.key}]` : 'Nothing was pressed yet'}\n        </p>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}